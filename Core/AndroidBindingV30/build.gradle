apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg', 'proguard-rules.pro'
        }
    }
    sourceSets {

        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['res']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

version = 'v0.6.1000'

// create tasks jar<Variant> for all non-Debug variants that generates the bare JAR file in builds/libs
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def rawJar = project.tasks.create "jar${variant.name.capitalize()}", Jar
    rawJar.dependsOn variant.javaCompile
    // Include Java classes
    rawJar.from variant.javaCompile.destinationDir
    // We can't use the below with the current build configurations, as :Core:androidbindingv30
    // depends on the default artifact of :Core:androidbinding, which is still the .aar file
    // If we can get this to work we can eliminate the need for the androidbindingJar project...
    // Include dependent jars with some exceptions
    // rawJar.from configurations.compile.findAll {
    //     it.getName() != 'android.jar' && it.getName() != 'annotations.jar' && !it.getName().startsWith('junit') && !it.getName().startsWith('support-v4') && !it.getName().startsWith('appcompat-v7') && !it.getName().endsWith('.aar')
    // }.collect {
    //     it.isDirectory() ? it : zipTree(it)
    // }
    artifacts.add('archives', rawJar);
}

dependencies {
    // compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile project(':Core:androidbinding')
}
